# -*- coding: utf-8 -*-
"""colab_render_cycles_blender_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/125iB5hFvBzub6--QbSoR1bjTh_fhSZq1
"""



"""How to start using this script?
Como começar a utilizar este script?

Go to Edit -> Notebook settings -
Ir a Editar -> Definições do bloco de notas -> selecionar GPU no acelerador e Guardar

Dar upload do vosso ficheiro .blend para o google drive

Guardem o seguinte ficheiro na mesma pasta:
https://github.com/microSingularity/blenderGoogleGPU/blob/main/GPU.py

Esse ficheiro contem o script que permite que o blender decida qual a grafica certa para utilizar neste sistema

No meu caso, eu fui ao google drive, criei uma pasta chamada Blender e coloquei la dentro o ficheiro GPU.py e os ficheiros .blend que estive a renderizar

Se tiverem duvidas quanto ao que alguma flag de compilaçao do blender faz, consultar este website: https://docs.blender.org/manual/en/latest/advanced/command_line/arguments.html

Cliquem no botão de Play do lado esquerdo do codigo para executar os segmentos de código

"""

#codigo para verificar as especificações da maquina a qual se estao a conectar
import psutil
def get_size(bytes, suffix="B"):
    factor = 1024
    for unit in ["", "K", "M", "G", "T", "P"]:
        if bytes < factor:
            return f"{bytes:.2f}{unit}{suffix}"
        bytes /= factor
print("="*40, "Memory Information", "="*40)
svmem = psutil.virtual_memory()
print(f"Total: {get_size(svmem.total)}") ; print(f"Available: {get_size(svmem.available)}")
print(f"Used: {get_size(svmem.used)}") ; print(f"Percentage: {svmem.percent}%")

#comando para verificar as specs da gpu da maquina do google, debaixo da coluna "Name"
! nvidia-smi -L

#@title Select Blender Version (used for rendering) then execute the cell{ display-mode: "form" }
Blender_Version = 'Blender 2.93' #@param ["Blender 2.79b", "Blender 2.80", "Blender 2.81", "Blender 2.82a", "Blender 2.83.0", "Blender 2.83.3", "Blender 2.83.15 LTS", "Blender 2.90alpha (expiremental)", "Blender 2.90", "Blender 2.92", "Blender 2.93", "Cycles X"]

def path_leaf(path):
  import ntpath
  head, tail = ntpath.split(path)
  return tail or ntpath.basename(head)

dl_link = {
    "Blender 2.79b": "https://download.blender.org/release/Blender2.79/blender-2.79b-linux-glibc219-x86_64.tar.bz2",
    "Blender 2.80": "https://download.blender.org/release/Blender2.80/blender-2.80-linux-glibc217-x86_64.tar.bz2",
    "Blender 2.81": "https://download.blender.org/release/Blender2.81/blender-2.81-linux-glibc217-x86_64.tar.bz2",
    "Blender 2.82a": "https://download.blender.org/release/Blender2.82/blender-2.82a-linux64.tar.xz",
    "Blender 2.83.0": "https://download.blender.org/release/Blender2.83/blender-2.83.0-linux64.tar.xz",
    "Blender 2.83.3": "https://download.blender.org/release/Blender2.83/blender-2.83.3-linux64.tar.xz",
    "Blender 2.83.15 LTS": "https://download.blender.org/release/Blender2.83/blender-2.83.15-linux-x64.tar.xz",
    "Blender 2.90alpha (expiremental)": "https://blender.community/5edccfe69c122126f183e2ad/download/5ef635439c12214ca244be6b",
    "Blender 2.90" : "https://download.blender.org/release/Blender2.90/blender-2.90.0-linux64.tar.xz",
    "Blender 2.92" : "https://download.blender.org/release/Blender2.92/blender-2.92.0-linux64.tar.xz",
    "Blender 2.93" : "https://download.blender.org/release/Blender2.93/blender-2.93.0-linux-x64.tar.xz",
    "Cycles X": "https://builder.blender.org/download/daily/archive/blender-3.0.0-alpha+master.17b09b509c06-linux.x86_64-release.tar.xz"
}


dl = dl_link[Blender_Version]
filename = path_leaf(dl)

if (Blender_Version == "Blender 2.90alpha (expiremental)"):
  !wget $dl
  !sudo apt-get install p7zip-full
  !7z x $filename
  !mv blender_290bM_e935447a5370-20200625-1857 blender



else:
  !wget -nc $dl
  !mkdir ./blender && tar xf $filename -C ./blender --strip-components 1



!apt install libboost-all-dev
!apt install libgl1-mesa-dev
!apt install libglu1-mesa libsm-dev
!apt autoremove

data = "import re\n"+\
    "import bpy\n"+\
    "scene = bpy.context.scene\n"+\
    "scene.cycles.device = 'GPU'\n"+\
    "prefs = bpy.context.preferences\n"+\
    "prefs.addons['cycles'].preferences.get_devices()\n"+\
    "cprefs = prefs.addons['cycles'].preferences\n"+\
    "print(cprefs)\n"+\
    "# Attempt to set GPU device types if available\n"+\
    "for compute_device_type in ('CUDA', 'OPENCL', 'NONE'):\n"+\
    "    try:\n"+\
    "        cprefs.compute_device_type = compute_device_type\n"+\
    "        print('Device found',compute_device_type)\n"+\
    "        break\n"+\
    "    except TypeError:\n"+\
    "        pass\n"+\
    "# Enable all CPU and GPU devices\n"+\
    "for device in cprefs.devices:\n"+\
    "    if not re.match('intel', device.name, re.I):\n"+\
    "        print('Activating',device)\n"+\
    "        device.use = True\n"
with open('setgpu.py', 'w') as f:
    f.write(data)

from google.colab import drive
drive.mount('/content/drive')

"""### Para renderizar 1 so frame clicar no proximo passo"""

#Blender render de 1 so frame
#-b ficheiro_para_renderizar
#-P script de python para escolher a grafica certa, entre AMD e NVIDIA
#-E render engine, pode ser CYCLES, BLENDER_EEVEE ou BLENDER_WORKBENCH (EEVEE nao funciona sem display de momento)
#-o ficheiro de saída
#-f numero do frame que querem renderizar
#-F formato de saída do render
#-noaudio Force sound system to None.
!sudo ./blender/blender -b '/content/drive/My Drive/Blender/ring_taper.blend' -noaudio -P '/content/drive/My Drive/Blender/GPU.py'  -E 'CYCLES' -o '/content/drive/My Drive/Blender/renders/ring_taper.png' -f 1 -F 'PNG'

"""### Para renderizar 1 animaçao"""

#-s start frame (frame onde começa a animação)
#-e end frame (frame final da animação)
#-a renderizar animação
#os cardinais no final do nome do ficheiro de saida sao substituidos pelo numero do frame
!sudo ./blender/blender -b '/content/drive/My Drive/Blender/cut_single.blend' -noaudio -P '/content/drive/My Drive/Blender/GPU.py'  -E 'CYCLES' -o '/content/drive/My Drive/Blender/animations/cut_single####.png' -s 179 -e 420 -a

"""### Para renderizar uma cena com physics (WIP)"""

#Blender testando para renderizar simulaçao de physics --> work in progress
#-b ficheiro_para_renderizar
#-P script de python para escolher a grafica certa, entre AMD e NVIDIA
#-E render engine, pode ser CYCLES, BLENDER_EEVEE ou BLENDER_WORKBENCH (EEVEE nao funciona sem display de momento)
#-o ficheiro de saída
#-f numero do frame que querem renderizar
#-F formato de saída do render
#-noaudio Force sound system to None.
#!sudo ./blender/blender -b '/content/drive/My Drive/Blender/fire_trail/fire_trail_tutorial.blend' --python-expr 'import bpy; bpy.ops.fluid.free_data();bpy.ops.fluid.bake_data()' -noaudio
#!sudo ./blender/blender -b '/content/drive/My Drive/Blender/test_quick_smoke.blend' --python-expr 'import bpy;bpy.context.scene.render.use_lock_interface = True;bpy.ops.fluid.free_all(); bpy.ops.fluid.bake_data()'  -noaudio -P '/content/drive/My Drive/Blender/GPU.py'  -E 'CYCLES' -o '/content/drive/My Drive/Blender/test_quick_smoke####.png' -s 1 -e 20 -a

!sudo ./blender/blender -b '/content/drive/My Drive/Blender/test_quick_smoke.blend' -noaudio -P '/content/drive/My Drive/Blender/bake_all.py' -P '/content/drive/My Drive/Blender/GPU.py'  -E 'CYCLES' -o '/content/drive/My Drive/Blender/test_quick_smoke####.png' -s 1 -e 20 -a